function snailsMove() {\n	\n\t/*** Clases clave para ayudar a Bersara ***/\n\t//                                        //\n\t// Phaser.Group                           //\n\t// Phaser.Physics.Arcade                  //\n\t// Phaser.Physics.Arcade.Body             //\n\t//                                        //\n\t/******************************************/\n\n\t/* Cuando el enemigo choca contra algo se da la vuelta \n\t   y cambia de sentido. Para saber si se ha chocado \n\t   podemos usar las propiedades 'blocked' o 'touching'\n\t   de Body */\n\tif (enemy.body.blocked.left || enemy.body.touching.left) {\n\t\tenemy.direction = State.LOOKINGLEFT;\n\t}\n\telse if (enemy.body.blocked.right || enemy.body.touching.right) {\n\t\tenemy.direction = State.LOOKINGLEFT;\n\t}\n\n\t/* Lo siguiente es cambiar su velocidad según la dirección\n\t   a la que este mirando, al igual que hicimos con Bersara.\n\t   También tendremos que cambiar su escala. Con la escala \n\t   podemos dar la vuelta a nuestros sprites, como si se viesen\n\t   reflejados en un espejo. \n\t   Para nuestros enemigos sólo tenemos en el spritesheet \n\t   animaciones para andar hacia la izquierda, así que cambiaremos\n\t   la escala cuando ande hacia la derecha y así no nos harán \n\t   falta más animaciones.\n\t   Por tanto, si vamos a movernos hacia la izquierda tendremos\n\t   que asignar una velocidad negativa (-enemy.walkSpeed) y una\n\t   escala positiva (enemy.scale = 1) */\n\n\n\t/* Si vamos a movernos hacia la derecha tendremos que asignar una\n\t   velocidad positiva (enemy.walkSpeed) y una escala negativa \n\t   (enemy.scale = -1) para darle la vuelta a nuestro sprite */\n\n\n\n\t/* Por último, y no por ello menos importante, tenemos que matar\n\t   a los caracoles si llegan a cierta profundidad. Así que si la \n\t   'y' es mayor o igual que 980 tendremos que matarles con el \n\t   método 'kill()' */\n\n\n\n}\n\n